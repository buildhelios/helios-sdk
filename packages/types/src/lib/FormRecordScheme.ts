/* <ALLOW_AUTO_DELETE DEPENDENCIES="FormRecord" /> */
// this file was auto generated by @iyio/protogen - https://github.com/iyioio/common/tree/main/packages/protogen
import { z } from 'zod';
import { ProfileScheme } from './ProfileScheme';
import { EventRecordScheme } from './EventRecordScheme';
import { StrMatchScheme } from './StrMatchScheme';
import { LayoutAxisScheme } from './LayoutAxisScheme';
import { LayoutTransitionScheme } from './LayoutTransitionScheme';
import { LayoutAlignmentScheme } from './LayoutAlignmentScheme';
import { FormDisplayTypeScheme } from './FormDisplayTypeScheme';
import { FormSubmissionScheme } from './FormSubmissionScheme';
import { MessageTemplateScheme } from './MessageTemplateScheme';

const __base__FormRecordScheme=z.object({
    id:z.number().int().describe("If not storing in the database use an id of 0"),
    uuid:z.string().max(255),
    name:z.string().max(255).optional(),
    description:z.string().optional(),
    created:z.number().optional(),
    accountId:z.number().int().optional(),
    iconUrl:z.string().optional(),
    published:z.boolean().optional(),
    tags:z.string().max(255).array().optional(),
    privacyPolicyUrl:z.string().optional(),
    termsUrl:z.string().optional(),
    lastUpdated:z.number().optional(),
    isDraft:z.boolean().optional(),
    publishId:z.number().int().optional().describe("Id of a form record that this form record is a draft of"),
    draftId:z.number().int().optional().describe("Id of a form record that this form record is a published version of"),
    width:z.string().max(255).optional(),
    height:z.string().max(255).optional(),
    transitionDurationMs:z.number().optional(),
    showImmediately:z.boolean().optional(),
    showAfterSeconds:z.number().optional().describe("Rule based on time"),
    showAfterScrollPx:z.number().optional().describe("Rule based on scroll distance"),
    showAfterPageViewCount:z.number().optional().describe("Rule based on page view count"),
    showAfterSubmitted:z.boolean().optional(),
    submissionEmail:z.string().optional(),
    showAfterDismissedSeconds:z.number().optional().describe("Controls how long to wait to show the form again after showing it"),
    showOnPageClose:z.boolean().optional(),
    hideOnMobile:z.boolean().optional(),
    hideOnDesktop:z.boolean().optional(),
    disableClickOutsideCloseDesktop:z.boolean().optional(),
    disableClickOutsideCloseMobile:z.boolean().optional(),
    hideFromExistingProfiles:z.boolean().optional(),
    insertTarget:z.string().max(255).optional().describe("A CSS selector that will be used to select an element to insert the form into. If not insertTarget or the insertTarget is not found the form will be inserted into the body"),
});
const __lazy__FormRecordScheme=z.object({
    templates:z.lazy(()=>MessageTemplateScheme).array(),
    formSubmissions:z.lazy(()=>FormSubmissionScheme).array().optional(),
    displayType:z.lazy(()=>FormDisplayTypeScheme).optional().describe("Defaults to fullScreen"),
    hAlign:z.lazy(()=>LayoutAlignmentScheme).optional(),
    vAlign:z.lazy(()=>LayoutAlignmentScheme).optional(),
    transition:z.lazy(()=>LayoutTransitionScheme).optional(),
    transitionAxis:z.lazy(()=>LayoutAxisScheme).optional(),
    includePaths:z.lazy(()=>StrMatchScheme).array().optional(),
    excludePaths:z.lazy(()=>StrMatchScheme).array().optional(),
    includeDomains:z.lazy(()=>StrMatchScheme).array().optional(),
    excludeDomains:z.lazy(()=>StrMatchScheme).array().optional(),
    includeQueryParams:z.lazy(()=>StrMatchScheme).array().optional(),
    excludeQueryParams:z.lazy(()=>StrMatchScheme).array().optional(),
    events:z.lazy(()=>EventRecordScheme).array().optional(),
    identProfiles:z.lazy(()=>ProfileScheme).array().optional(),
});
export const FormRecordScheme:(typeof __base__FormRecordScheme)=__base__FormRecordScheme.merge(__lazy__FormRecordScheme) as any;
