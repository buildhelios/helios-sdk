/* <ALLOW_AUTO_DELETE DEPENDENCIES="Account" /> */
// this file was auto generated by @iyio/protogen - https://github.com/iyioio/common/tree/main/packages/protogen
import { z } from 'zod';
import { AccountLlmPropertiesScheme } from './AccountLlmPropertiesScheme';
import { AccountThemeScheme } from './AccountThemeScheme';
import { FormRecordScheme } from './FormRecordScheme';
import { FileRecordScheme } from './FileRecordScheme';
import { EmailAttributionEventTypeScheme } from './EmailAttributionEventTypeScheme';
import { CurrencyScheme } from './CurrencyScheme';
import { MessageRecordScheme } from './MessageRecordScheme';
import { MessageSenderScheme } from './MessageSenderScheme';
import { MessageTemplateScheme } from './MessageTemplateScheme';
import { ApiKeyScheme } from './ApiKeyScheme';
import { ProfileGroupScheme } from './ProfileGroupScheme';
import { ProfileScheme } from './ProfileScheme';
import { UserScheme } from './UserScheme';
import { LocationScheme } from './LocationScheme';
import { RegionScheme } from './RegionScheme';
import { EventRecordScheme } from './EventRecordScheme';
import { AccountTypeScheme } from './AccountTypeScheme';

const __base__AccountScheme=z.object({
    id:z.number().int(),
    name:z.string().max(255),
    created:z.number().optional(),
    description:z.string().optional(),
    timezone:z.string().max(255),
    industry:z.string().max(255).optional(),
    mfaRequired:z.boolean().optional(),
    minProfileSendIntervalMs:z.number().int().optional().describe("The min number of milliseconds between sending messages to a single profile excluding transactional messages"),
    messageSubjectPreviewPrefix:z.string().max(255).optional(),
    placeEmailTrackingPixelAtBottom:z.boolean().optional(),
    websiteUrl:z.string().optional(),
    logoUrl:z.string().optional(),
    country:z.string().max(255).optional(),
    state:z.string().max(255).optional(),
    city:z.string().max(255).optional(),
    address:z.string().max(255).optional(),
    address2:z.string().max(255).optional(),
    postalCode:z.string().max(255).optional(),
    privacyPolicyUrl:z.string().optional(),
    termsUrl:z.string().optional(),
    emailAttributionTime:z.number().int().optional(),
    smsAttributionTime:z.number().int().optional(),
    notificationAttributionTime:z.number().int().optional(),
    platformUsages:z.string().max(255).array().optional(),
    minMessageSendIntervalHours:z.number().optional(),
    messagePreviewPrefix:z.string().optional(),
    billingPeriod:z.number().int().optional(),
    stripeCustomerId:z.string().max(255).optional(),
    stripeSubscriptionId:z.string().max(255).optional(),
    stripeSubscriptionActive:z.boolean().optional(),
    formSubmissionEmail:z.string().email().optional(),
    autoUpgrade:z.boolean().optional(),
    hasUsedFreePlan:z.boolean().optional(),
    notificationCompanyName:z.string().max(255).optional(),
    notificationMinMessageSendIntervalHours:z.number().optional(),
    notificationLogoUrl:z.string().optional(),
}).describe("Client accounts");
const __lazy__AccountScheme=z.object({
    type:z.lazy(()=>AccountTypeScheme).optional(),
    events:z.lazy(()=>EventRecordScheme).array().optional(),
    regions:z.lazy(()=>RegionScheme).array().optional(),
    locations:z.lazy(()=>LocationScheme).array().optional(),
    users:z.lazy(()=>UserScheme).array().optional(),
    profiles:z.lazy(()=>ProfileScheme).array().optional(),
    profileGroups:z.lazy(()=>ProfileGroupScheme).array().optional(),
    apiKeys:z.lazy(()=>ApiKeyScheme).array().optional(),
    messageTemplates:z.lazy(()=>MessageTemplateScheme).array().optional(),
    messageSenders:z.lazy(()=>MessageSenderScheme).array().optional(),
    messages:z.lazy(()=>MessageRecordScheme).array().optional(),
    currency:z.lazy(()=>CurrencyScheme),
    emailAttributionType:z.lazy(()=>EmailAttributionEventTypeScheme).optional(),
    files:z.lazy(()=>FileRecordScheme).array().optional(),
    forms:z.lazy(()=>FormRecordScheme).array().optional(),
    theme:z.lazy(()=>AccountThemeScheme).optional(),
    llmProperties:z.lazy(()=>AccountLlmPropertiesScheme).optional(),
});
export const AccountScheme:(typeof __base__AccountScheme)=__base__AccountScheme.merge(__lazy__AccountScheme) as any;
